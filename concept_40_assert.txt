# 1. Alias for a Module
import numpy as np  # np is an alias for numpy
arr = np.array([1, 2, 3])  # Using np alias for numpy
print("Array created using np alias:", arr)

# 2. Alias for a Function
def add(a, b):
    return a + b

# Creating an alias for the function 'add'
sum_values = add
print("Sum using sum_values alias:", sum_values(5, 3))

# 3. Alias for a Class
class Car:
    def drive(self):
        print("Driving the car")

# Creating an alias for the 'Car' class
Vehicle = Car
my_vehicle = Vehicle()  # Using the alias 'Vehicle'
my_vehicle.drive()  # Output: Driving the car

# 4. Alias for a List (Variable Alias)
a = [1, 2, 3]
b = a  # b is now an alias for a
b.append(4)
print("List after modifying alias b:", a)  # Both a and b point to the same list

# 5. Alias for a Dictionary (Variable Alias)
d1 = {"key1": "value1", "key2": "value2"}
d2 = d1  # d2 is an alias for d1
d2["key3"] = "value3"
print("Dictionary after modifying alias d2:", d1)  # Both d1 and d2 point to the same dictionary

# 6. Alias for a Tuple (Variable Alias)
t1 = (1, 2, 3)
t2 = t1  # t2 is an alias for t1
print("Tuple aliasing example:", t2)  # t2 references the same tuple as t1

# 7. Alias for a Set (Variable Alias)
s1 = {1, 2, 3}
s2 = s1  # s2 is an alias for s1
s2.add(4)
print("Set after modifying alias s2:", s1)  # Both s1 and s2 point to the same set



- VVVI Concept

try:
    raise KeyError("Error msg")
except KeyError as e:  # `e` is the instance of the KeyError
    print(e)  # Prints the error message, which is "Error msg"


Here:

- e is an instance of the KeyError exception.
- The as keyword binds the exception to the variable e, and you can access the message ("Error msg") or other attributes of the exception.
- print(e) prints the message of the exception, not the exception type (KeyError).



### **Key Points to Remember About Assert in Python**

1. **What is `assert`?**
   - Used to test if a condition is `True` in the program.
   - If the condition is `True`, it does nothing and the program continues.
   - If the condition is `False`, it raises an `AssertionError` and optionally displays an error message.

2. **Syntax of `assert`:**
   ```python
   assert <condition>, <optional_error_message>
   ```
   - **condition**: The logical condition to be checked.
   - **optional_error_message**: (Optional) Message to display if the condition is `False`.

3. **Purpose of `assert`:**
   - **Debugging tool** to validate assumptions in the code.
   - Helps catch logical bugs early in the development process.
   - Terminate the program when something unexpected occurs.

4. **Assertion Error Example:**
   ```python
   assert 2 + 3 == 6, "Incorrect addition"  # Raises AssertionError with message
   ```

5. **How does `assert` work?**
   - When the condition is `True`, no error occurs.
   - When the condition is `False`, it raises an `AssertionError` and terminates the program unless handled by `try-except`.

6. **Using `assert` for Debugging:**
   - Useful for checking conditions that should always be `True` in the code.
   - Example: Ensuring a divisor is not zero before performing division.

7. **Disabling `assert` Statements:**
   - Running Python in optimized mode (`-O` flag) disables all `assert` statements.
   - Example:
     ```bash
     python -O program.py  # Disables assert statements
     ```

8. **Comparison with `if` Statement:**
   - The `assert` statement is shorter and more readable.
   - It can be disabled in optimized mode (`-O`), unlike the `if` statement.
   - **Assert Example**:
     ```python
     assert y != 0, "Division by zero!"
     ```
   - **Equivalent `if` Example**:
     ```python
     if not y:
         raise AssertionError("Division by zero!")
     ```

9. **How to Handle AssertionError:**
   - Use `try-except` blocks to catch `AssertionError` and prevent program termination:
     ```python
     try:
         assert x != 0, "Cannot divide by zero!"
         print(10 / x)
     except AssertionError as e:
         print(e)
     ```

10. **Where to Use `assert`:**
    - **For internal consistency checks** where conditions should always be `True`.
    - **Debugging purposes**: Verifying program assumptions and logic.
    - **Avoid using assert for user input validation** or trivial conditions. Use it for **“this should not happen” situations**.

11. **Common Use Cases for `assert`:**
    - **Parameter Validation**: Ensure a parameter is within a valid range.
      ```python
      assert temperature >= 0, "Temperature cannot be below absolute zero!"
      ```
    - **Invariants in Calculations**: Check for conditions that should never be violated.
      ```python
      assert radius == diameter / 2, "Radius is not half of the diameter!"
      ```

12. **How `assert` Helps in Code Documentation:**
    - Documents programmer assumptions and makes them clear to others.
    - Makes debugging easier by pointing out where things went wrong.

13. **Good Practices:**
    - Use `assert` for **"this should not happen"** situations (e.g., unexpected logic failures).
    - Avoid using `assert` for checking user input validation or trivial conditions.

14. **Key Difference:**
    - **`assert` is for debugging**, while **`if` is for conditional logic**.

### **Important Notes:**
- **Assertions terminate programs** if the condition is `False`.
- Assertions are **ignored in optimized mode** (`-O` flag).
- You can add an **optional error message** to help clarify the reason for failure.

---

### **Quick Example of `assert` in Action:**

```python
# Example 1: Valid input
assert 10 > 5, "This will not raise an error"

# Example 2: Invalid input, will raise AssertionError
assert 10 < 5, "This will raise an error"


 - two ways of stopping the execution of a program – by exit() and by abort().

When a program is terminated by using exit(), the function performs – flushing of unwritten buffered data, closing of open files, and removal of temporary files and it returns an integer exit status to the operating system.

The abort() function may not close any files that are open, may not flush stream buffers, and may also not delete any temporary files. One major difference between both kinds of functions that terminate a program is that abort() results in abnormal termination while exit() causes normal termination.

Termination of the program due to an assert statement occurs with the help of the abort() function when the condition mentioned in the assert statement returns False.