A Class is an object constructor or a blueprint from which objects are created. It provides a means of bundling data and functionality together.

Class in python are the user-defined blueprints that help us create an object. Objects are the instances of a particular class.

- The syntax for creating a Class in Python is as follows:

class ClassName:
    # Statement 1
    # Statement 2
    .
    .
    # Statement n

e.g

class Scaler:
    pass

The keyword pass denotes an empty class. It is written just to avoid any errors in the console while running the above code.

Those functions which we define inside the class are known as methods.
variables inside the class are known as attributes.

- Python Class Attributes

class Scaler:
    Course = 'Python'

? Example

class Scaler:
    Course1 = 'Python'
    Course2 = 'C++'
    Course3 = 'Java'
# Accessing the values of the attributes
print(Scaler.Course1)
print(Scaler.Course3)
# Accessing through object instantiation.
obj= Scaler()
print(obj.Course2)

? output

Python
Java
C++

?  Assigning a class to a variable is known as object instantiation.

If we change the value of the attribute using the class name(the first method in the above example), then it would change across all the instances of that class. While if we change the value of an attribute using class instance(object instantiation), it would only change the value of the attribute in that instance only.

class Scaler:
    Course = 'Python'
# Changing value using Class Name
Scaler.Course = 'Machine Learning'
obj= Scaler()
print(obj.Course)
# Changing value using Class Instance 
obj.Course = 'AI'
print(obj.Course)   # Value will change in this instance only
print('Using class instance would not reflect the changes to other instances')
print(Scaler.Course) # Value haven't changed
obj2= Scaler()
print(obj2.Course)   # Value haven't changed

Output: 

Machine Learning
AI
Using class instance would not reflect the changes to other instances
Machine Learning
Machine Learning

#python class methods

class Scaler:
    def CourseDetails(self): 
        print('Course Information')

Note: When we define a method, it must at least pass a single parameter which is generally named as self. It refers to the current instance of the class.

# Instance Attributes (_init_method) in Python:

We can also provide the values of the attributes during the time of object creation. Instance attributes are attached to the instance of a class. Whenever a new object of the class is created, this method is called.

class Scaler:
  # init method
  def __init__(self, name):
    self.name = name
  # normal method
  def CourseDetails(self):
    print('The name of this course is', self.name)
study1 = Scaler('Python')
study1.CourseDetails()
study2 = Scaler('Machine Learning')
study2.CourseDetails()


Output : 

The name of this course is Python
The name of this course is Machine Learning


