- The key can only be strings, numbers or tuples. As in python, key are unmutable.

my_dict={'Name':'Ravi',"Age":'32'}

#creating an empty dictionary
my_dict={}
#creating a dictionary with integer keys
fruits={'1':'apple','2':'banana','3':'cherry'}
#creating a dictionary with mixed keys
random_dict={'1':'red','Name':'Anushka'}
print(my_dict)
print(fruits)
print(random_dict)

# Building dictionary using dict keyword

Dict = dict([(1, 'Scaler'), (2, 'Academy')])   
print("\nCreate a Dictionary by using  dict(): ")   
print(Dict)


#creating an empty dictionary
my_dict={}
print(my_dict)
#adding elements to the dictionary one at a time
my_dict[1]="James"
my_dict[2]="Jim"
my_dict[3]="Jake"
print(my_dict)
#modifying existing entry
my_dict[2]="Apple"
print(my_dict)
#adding multiple values to a single key
my_dict[4]="Banana,Cherry,Kiwi"
print(my_dict)
#adding nested key values
my_dict[5]={'Nested' :{'1' : 'Scaler', '2' : 'Academy'}}
print(my_dict)

? using delete the dictionary itself (that matches the key)
my_dict={1: 'James', 2: 'Apple', 3: 'Jake', 4: 'Banana,Cherry,Kiwi'}
del my_dict[4]
print(my_dict)

? using clear to clear the dictionary elements
my_dict={1: 'James', 2: 'Apple', 3: 'Jake', 4: 'Banana,Cherry,Kiwi'}
my_dict.clear()
print(my_dict)

# Python Dictionary Comprehension

The concept of creating a new Python dictionary from an iterable is known as Python Dictionary Comprehension.

my_dict = {x: x*x for x in range(6)}
print(my_dict)

- Output
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

# 1. Use the for loop to iterate the keys:

my_dict={1: 'James', 2: 'Apple', 3: 'Jake', 4: 'Banana,Cherry,Kiwi'}
for x in my_dict:
    print(x)

Output: 
1
2
3
4

# 2. Use the for loop to iterate the values:

my_dict={1: 'James', 2: 'Apple', 3: 'Jake', 4: 'Banana,Cherry,Kiwi'}
for x in my_dict:
    print(my_dict[x])

Output:

James
Apple
Jake
Banana,Cherry,Kiwi

# 3. Use the for loop along with the items() method:

my_dict={1: 'James', 2: 'Apple', 3: 'Jake', 4: 'Banana,Cherry,Kiwi'}
for x in my_dict.items(): 
    print(x)

- Output:

(1, 'James')
(2, 'Apple')
(3, Jake')
(4, 'Banana, Cherry, Kiwi')

# 4. Use the for loop along with the values() method:

my_dict={1: 'James', 2: 'Apple', 3: 'Jake', 4: 'Banana,Cherry,Kiwi'}
for x in my_dict.values(): 
    print(x)

- Ouput:

James
Apple
Jake
Banana,Cherry,Kiwi

cmp(dict1,dict2)	It compares the items of both the dictionaries and returns true if the value of the first dictionary is greater than the second else returns false.
len(dict)	It gives the total number of items in the dictionary.
str(dict)	It produces a printable string representation of the dictionary.
all(dict)	It returns true if all the keys in the dictionary are true.
any(dict)	It returns true if any key in the dictionary is true.
sorted(dict)	It returns a new sorted list of keys in a dictionary.


dict.clear()	It removes all elements of the dictionaries.
dict.copy()	It returns a copy of the dictionary.
dict.pop()	It removes an element from the specified key.
dict.get()	It is used to get the value of the specified key.
dict.fromkeys()	It creates a new dictionary with keys from seq and values set to value.
dict.items()	It returns the list of dictionary tuple pairs.
dict.keys()	It returns the list of keys of the dictionary.
dict.update(dict2)	It adds the dict2â€™s key-value pairs to dict.
dct.has_key()	It returns true if the specified key is present in the dictionary else false.
